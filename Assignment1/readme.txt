Name					Kevin Harris
Student Number			C09515259

Method:
I started the project of by making the main and all the classes. The classes where named shape, LINE, CIRCLE and BOX. While making the classes I made the shape class the base class. After which I preceded to including the header files of the classes stated above and the allegro libraries to the main C++ file. This allowed me to access information from the different classes so that I could test if my code was going to work. 

I created a bitmap and then some hard coded pointers to the in which I put parameters to send to the different classes. For this to work I populated the shape file with a virtual void draw function BITMAPs for the circle, box and line to use.  I also added in variables (int x, y, x1, y1, centre, r, g, d) to be sent and read to the different classes. In the classes I added in to the header files a constructor (in CIRCLE it was CIRCLE (int x, int y, int centre, int r, int g, int b)) so that I could use a parameterised constructor and I added a draw function into each also (void draw (BITMAP * bb);). In the C++ files themselves I added in the draw functions with sprites in them and for adding in the constructor I added the name with the constructor values in brackets. In this I created the bitmap, made the bitmap transparent and made the circle with the values sent.

After successfully creating the shapes like that I decided to do the program show different shapes when different numbers where pressed. I installed the keyboard functions, declared a bool that was equal to false and made a while loop that would fun till the bool was true. In this while I put an if statement that held a switch statement. I used the keys ESC, 1, 2, 3 and 4 to make the program know when a number was pressed what shape to draw and to stop when ESC was pressed.

I then proceeded to reading in a file. The file I made was shapes.txt and was placed in the same folder as the C++ and header files. I included in the file reading library and the string stream library and also the vector. From there I read in the lines in the file and parsed them into the correct variables depending in whether the line they were on started with a line, circle or box.  I declared some shape pointers and a string for the colours to be put into at the top of the main and when the file was finished parsing the values I used an if to change the colour from a string into itâ€™s appropriate rgb colour. These values where then put into their appropriate shape pointers equalling the appropriate class name that it was to be sent to (e.g. cirCLE = new CIRCLE (cir1, cir2, cir3, cir4, cir5, cir6);). A vector of shapes called list of shapes (vector<shape *> listofshapes ;) was then declared so that the shapes could be added onto the end of (listofshapes.push_back(LiNE);). 

The while loop would then print out the draw function depending on which number was pressed (e.g. cirCLE->draw (myBitmap);). I decided that the number 4 should play a midi file and iterate shapes I made with added instances of manipulated values of the information that had been read in from the file. For this I added in more shape pointers and pushed them back after inputting the correct manipulated variables. A for loop was then added in to the switch statement at the KEY_4 case(for (vector<shape *>::iterator i = listofshapes.begin() ; i < listofshapes.end() ; i ++)). Inside the for loop there was a function to draw each shape in the shape vector shape ((*i)->draw(myBitmap);).

Once the for loop was correctly implemented I proceeded to finding a suitable midi file to play when the button was pressed. I chose Final Fantasy 7 victory midi and put it in the same directory as the C++ and header files. I them installed the sounds functions in the program (install_sound (DIGI_AUTODETECT, MIDI_AUTODETECT, "A");) and loaded the song into the program(BACK = load_midi("FF7_Victiory_Fanfare.mid");). The play function (play_midi(BACK, true);) and stop function (stop_midi()) was then put into the KEY_4 case.
